name: Deploy to VPS

on:
  push:
    branches:
      - main # o la rama que uses para desplegar

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # ----------------------------------------------------
            # 1. CORRECCI√ìN DE RUTAS: Usar la ruta absoluta /var/www/
            # Se evita el error 'cd: No such file or directory' al usar rutas absolutas
            PROJECT_PARENT_DIR="/var/www/Proyecto-TerraVerde"
            PROJECT_ROOT="$PROJECT_PARENT_DIR/backend"
            VENV_ACTIVATE="$PROJECT_ROOT/.venv/bin/activate"
            # ----------------------------------------------------
            
            # Navegar al directorio padre (donde reside el repo git)
            cd $PROJECT_PARENT_DIR || exit 1
            set -e 

            # 2. CORRECCI√ìN DE SEGURIDAD: A√±adir excepci√≥n de Git
            # Esto resuelve el error 'fatal: detected dubious ownership'
            echo "üîê Configurando excepci√≥n de directorio de Git..."
            # Se usa 'sudo' para asegurar que el comando se ejecuta con permisos de root
            # y se aplica al usuario que ejecuta la acci√≥n SSH.
            sudo git config --system --add safe.directory $PROJECT_PARENT_DIR

            echo "üåê Verificando y preparando el repositorio..."

            # SI EL DIRECTORIO DEL PROYECTO EXISTE, forzamos la actualizaci√≥n
            if [ -d "$PROJECT_ROOT" ]; then
                echo "üì¶ Directorio existente. Forzando actualizaci√≥n."
                git reset --hard HEAD # Se ejecuta en $PROJECT_PARENT_DIR
                git pull
            # SI NO EXISTE, LO CLONAMOS LIMPIAMENTE
            else
                echo "üö® Directorio 'backend' no encontrado. Clonando..."
                # Nota: Si el clonado falla, es posible que se necesite 'sudo'
                git clone https://github.com/NikoAlvarez02/Proyecto-TerraVerde.git
            fi
            
            # Navegar al directorio 'backend' para el resto de comandos
            cd $PROJECT_ROOT || exit 1

            echo "üêç Verificando entorno virtual..."
            # Paso 1: CREAR EL VENV SI NO EXISTE
            if [ ! -f "$VENV_ACTIVATE" ]; then
              echo "üêç El entorno virtual (.venv) no existe. Cre√°ndolo..."
              python3 -m venv .venv 
            fi

            echo "üêç Activando entorno virtual..."
            source $VENV_ACTIVATE
            
            echo "üîß Instalando dependencias..."
            pip install -r requirements.txt

            echo "üóÉÔ∏è Aplicando migraciones..."
            python manage.py migrate --noinput

            echo "üìÅ Recolectando archivos est√°ticos..."
            # 3. CORRECCI√ìN DE PERMISOS PARA COLLECTSTATIC
            # Se usa 'sudo -u www-data' para garantizar que los archivos est√°ticos
            # recolectados tengan el propietario correcto (www-data), evitando futuros 403s.
            sudo -u www-data python manage.py collectstatic --noinput

            echo "üîÑ Reiniciando Gunicorn..."
            systemctl restart gunicorn

            echo "‚úÖ Reinicio de Gunicorn completo"

            echo "üß± Reiniciando Nginx..."
            systemctl reload nginx || echo "Nginx no recargado (no es cr√≠tico)"
