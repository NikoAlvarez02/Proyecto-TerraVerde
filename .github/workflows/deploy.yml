name: Deploy to VPS

on:
  push:
    branches:
      - main # o la rama que uses para desplegar

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
           ======CMD======
            # ----------------------------------------------------
            # Rutas cr√≠ticas
            PROJECT_PARENT_DIR="/var/www/Proyecto-TerraVerde"
            PROJECT_ROOT="$PROJECT_PARENT_DIR/backend"
            VENV_ACTIVATE="$PROJECT_ROOT/.venv/bin/activate"
            PYTHON_BIN="$PROJECT_ROOT/.venv/bin/python" # <--- NUEVA VARIABLE DE RUTA
            # ----------------------------------------------------
            # Navegar al directorio padre
            cd $PROJECT_PARENT_DIR || exit 1
            set -e 
            
            # 2. CORRECCI√ìN DE SEGURIDAD: A√±adir excepci√≥n de Git
            echo "üîê Configurando excepci√≥n de directorio de Git..."
            sudo git config --system --add safe.directory $PROJECT_PARENT_DIR

            echo "üåê Verificando y preparando el repositorio..."
            
            # SI EL DIRECTORIO DEL PROYECTO EXISTE, forzamos la actualizaci√≥n
            if [ -d "$PROJECT_ROOT" ]; then
                echo "üì¶ Directorio existente. Forzando actualizaci√≥n."
                git reset --hard HEAD
                git pull
            else
                echo "üö® Directorio 'backend' no encontrado. Clonando..."
                git clone https://github.com/NikoAlvarez02/Proyecto-TerraVerde.git
            fi

            # Navegar al directorio 'backend' para el resto de comandos
            cd $PROJECT_ROOT || exit 1
            
            # NO USAMOS 'source $VENV_ACTIVATE' porque usaremos la ruta absoluta.
            # Solo verificamos si el VENV existe y se crea/instala si es necesario.
            
            echo "üêç Verificando entorno virtual..."
            if [ ! -f "$VENV_ACTIVATE" ]; then
              echo "üêç El entorno virtual (.venv) no existe. Cre√°ndolo..."
              python3 -m venv .venv 
            fi

            echo "üîß Instalando dependencias (usando VENV python bin)..."
            $PYTHON_BIN -m pip install -r requirements.txt
            
            echo "üóÉÔ∏è Aplicando migraciones (usando VENV python bin)..."
            $PYTHON_BIN manage.py migrate --noinput
            
            echo "üìÅ Recolectando archivos est√°ticos (¬°CORREGIDO! usando VENV python bin y www-data)..."
            # Ejecutamos el binario de python del VENV con el usuario www-data
            sudo -u www-data $PYTHON_BIN manage.py collectstatic --noinput
            
            echo "üîÑ Reiniciando Gunicorn..."
            systemctl restart gunicorn
            
            echo "‚úÖ Reinicio de Gunicorn completo"
            
            echo "üß± Reiniciando Nginx..."
            systemctl reload nginx || echo "Nginx no recargado (no es cr√≠tico)"
